name: Build Release

on: [workflow_dispatch]

jobs:
  # testing and linting before release
  testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Code testing
        uses: actions/setup-node@v4
        with:
          node-version: '20.14'
      - run: npm ci
      - run: npm run test

  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Code testing
        uses: actions/setup-node@v4
        with:
          node-version: '20.14'
      - run: npm ci
      - run: npm run lint

  # create release branch
  create-release-branch:
    runs-on: ubuntu-latest
    needs:
      - testing
      - linting
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create release branch
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git checkout -b releases/${{ github.run_number }}
          git push origin releases/${{ github.run_number }}

  # build docker and push it to public registry
  docker-build-and-push:
    runs-on: ubuntu-latest
    needs:
      - create-release-branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup docker
        uses: docker/setup-buildx-action@v3
      - name: Login Container Y Registry
        run: echo ${{ secrets.YANDEX_TOKEN }} | docker login --username oauth --password-stdin cr.yandex
      - name: Build and push Docker image
        run: |
          docker build -t cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ github.run_number }} .
          docker tag cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ github.run_number }} cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ github.run_number }}_latest
          docker push cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ github.run_number }}
          docker push cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ github.run_number }}_latest

  # create tag
  create-tag:
    runs-on: ubuntu-latest
    needs:
      - docker-build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create tag
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          tag_name="v${{ github.run_number }}"
          git tag -a $tag_name -m "Release $tag_name"
          git push origin $tag_name
      
  # Create issue
  create-issue:
    runs-on: ubuntu-latest
    needs:
      - create-tag
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create Issue
        run: |
          git fetch
          ISSUE_BODY="Release: ${{ github.run_number }}"
          ISSUE_BODY="$ISSUE_BODY\n\nRelease: ${{ github.run_number }}"
          ISSUE_BODY="$ISSUE_BODY\n\nDate: $(date +%Y-%m-%d)"
          ISSUE_BODY="$ISSUE_BODY\n\nAuthor**: ${{ github.actor }}"
          tag_name="v${{ github.run_number }}"
          ISSUE_BODY="$ISSUE_BODY\n\nCommits List**: $(git log --pretty=format:"%h - %s" $tag_name..HEAD)"
          ISSUE_BODY="$ISSUE_BODY\n\nDocker Images:\n https://cr.yandex/${{ secrets.CONTAINER_REGISTRY_ID }}/app:${{ github.run_number }}
          gh issue create --title "Release creation v${{ github.run_number }}" --body "$ISSUE_BODY" --repo $GITHUB_REPOSITORY
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
